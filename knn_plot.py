import matplotlib.pyplot as plt
# plotting

k=[]
score_ros_pre=[]
score_ros_rec=[]
score_ros_f1=[]
score_ada_pre=[]
score_ada_rec=[]
score_ada_f1=[]
score_smt_pre=[]
score_smt_rec=[]
score_smt_f1=[]

# test data oversampling X, scaling X
k=[1,3,5,10,15,20]
score_ros_pre=[0.12871287128712872, 0.13861386138613863, 0.13861386138613863, 0.15841584158415842, 0.15841584158415842, 0.15841584158415842]
score_ros_rec=[0.2708333333333333, 0.15217391304347827, 0.11382113821138211, 0.06584362139917696, 0.04519774011299435, 0.034482758620689655]
score_ros_f1=[0.174496644295302, 0.1450777202072539, 0.125, 0.09302325581395349, 0.07032967032967033, 0.056637168141592927]
score_ada_pre=[0.45544554455445546, 0.46534653465346537, 0.45544554455445546, 0.45544554455445546, 0.45544554455445546, 0.46534653465346537]
score_ada_rec=[0.0203810367744794, 0.014465989535241613, 0.012279765082754938, 0.009824861170439982, 0.008488651042627792, 0.007953968522592655]
score_ada_f1=[0.039016115351993216, 0.028059701492537312, 0.023914738757473356, 0.019234789880827934, 0.016666666666666666, 0.015640599001663893]
score_smt_pre=[0.45544554455445546, 0.46534653465346537, 0.44554455445544555, 0.45544554455445546, 0.48514851485148514, 0.4752475247524752]
score_smt_rec=[0.020711391265195857, 0.014953865733375756, 0.01240694789081886, 0.01044504995458674, 0.009621048497938347, 0.008602150537634409]
score_smt_f1=[0.03962101636520241, 0.028976572133168926, 0.024141630901287556, 0.02042175360710322, 0.01886792452830189, 0.016898433374405913]

plt.title('randomoversampling - test data X')
plt.plot(k, score_ros_pre, label='ros precision')
plt.plot(k, score_ros_rec, label='ros recall')
plt.plot(k, score_ros_f1, label='ros f1_score')
plt.legend()
plt.xlabel('k 값')
plt.show()

plt.title('ADASYN - test data X')
plt.plot(k, score_ada_pre, label='ada precision')
plt.plot(k, score_ada_rec, label='ada recall')
plt.plot(k, score_ada_f1, label='ada f1_score')
plt.legend()
plt.xlabel('k 값')
plt.show()

plt.title('SMOTE - scaling X, test data X')
#plt.plot(k, score_smt_pre, label='smt precision')
#plt.plot(k, score_smt_rec, label='smt recall')
plt.plot(k, score_smt_f1, label='smt f1_score')
plt.legend()
plt.xlabel('k 값')
plt.show()

# test data oversampling X, scaling O
k=[1,3,5,10,20]
score_smt_f1=[0.7272727272727274, 0.6582278481012658, 0.5954198473282444, 0.47023809523809523, 0.36241610738255037]

plt.title('SMOTE - scaling O, test data X')
plt.plot(k, score_smt_pre, label='smt precision')
plt.plot(k, score_smt_rec, label='smt recall')
plt.plot(k, score_smt_f1, label='smt f1_score')
plt.legend()
plt.xlabel('k 값')
plt.show()

# test data oversamping O, scaling X
k=[1,3,5,10,15,20]
score_ros_pre=[0.12688086970536094, 0.137136829150367, 0.137136829150367, 0.15631547331252837, 0.15631547331252837, 0.15631547331252837]
score_ros_rec=[0.9959746981023577, 0.9917355371900827, 0.988488752772204, 0.9791666666666666, 0.9692922685563732, 0.9597013582801115]
score_ros_f1=[0.2250870717887405, 0.24095455072016062, 0.24085844419855382, 0.26959279333914515, 0.2692152409790563, 0.2688421317878292]
score_ada_pre=[0.40607597162787973, 0.4200128964183129, 0.427149891552846, 0.43645582976727826, 0.4411454364265197, 0.442420423237001]
score_ada_rec=[0.9261029411764706, 0.8995041114807608, 0.8873565317989466, 0.8653030391074438, 0.8485412262156449, 0.8373970208870767]
score_ada_f1=[0.5645910591303639, 0.572638813962317, 0.5766943996517714, 0.5802404192725077, 0.5804977292669051, 0.5789599854248372]
score_smt_pre=[0.4090809195200211, 0.42367368467320116, 0.4303254069418194, 0.43684526687471614, 0.4409036965408114, 0.448595666124566]
score_smt_rec=[0.9278854142434615, 0.9030636145029824, 0.8904890398083861, 0.8717363973920417, 0.8568621867881548, 0.8472990923179101]
score_smt_f1=[0.5678231513869683, 0.5767596784809621, 0.5802481330751905, 0.5820254548293903, 0.5822216632969924, 0.5866135320771346]


plt.title('randomoversampling - test data O')
plt.plot(k, score_ros_pre, label='ros precision')
plt.plot(k, score_ros_rec, label='ros recall')
plt.plot(k, score_ros_f1, label='ros f1_score')
plt.legend()
plt.xlabel('k 값')
plt.show()

plt.title('ADASYN - test data O')
plt.plot(k, score_ada_pre, label='ada precision')
plt.plot(k, score_ada_rec, label='ada recall')
plt.plot(k, score_ada_f1, label='ada f1_score')
plt.legend()
plt.xlabel('k 값')
plt.show()


plt.title('SMOTE - scaling X, test data O')
plt.plot(k, score_smt_pre, label='smt precision')
plt.plot(k, score_smt_rec, label='smt recall')
plt.plot(k, score_smt_f1, label='smt f1_score')
plt.legend()
plt.xlabel('k 값')
plt.show()


# test data oversamping O, scaling O

#robust scaler
k=[1,3,5,10,15,20,30]
score_ros_pre=[0.9995578644854648, 0.9992812143249757, 0.9989222088378875, 0.9985423664364028, 0.9977323791295665, 0.9973267899535181, 0.9956166214569329]
score_ros_rec=[0.6624617232942142, 0.6925409872093534, 0.6925409872093534, 0.6925409872093534, 0.7026650843186381, 0.7324659721916985, 0.7421065740700042]
score_ros_f1=[0.7968243338502747, 0.8181039331919865, 0.817983594642301, 0.8178562159356346, 0.8245974501594725, 0.8446190234836967, 0.8503697734350735]
score_ada_pre=[0.9989695843376819, 0.9980546499270494, 0.9973354649613643, 0.9955930187821342, 0.9936954832023491, 0.9917223650385604, 0.9884043272481406]
score_ada_rec=[0.7956357348027434, 0.8120200480684683, 0.8228061433847236, 0.8343103347206753, 0.8431033472067531, 0.8480420892197666, 0.8569376868515153]
score_ada_f1=[0.8857835099483614, 0.8954772813588359, 0.9017031903702694, 0.9078441690985345, 0.9122261775455677, 0.9142717204114198, 0.9179880059028541]
score_smt_pre=[0.9990470256203496, 0.9980957171601035, 0.9972890125272428, 0.9956859662911536, 0.9939468147483875, 0.992119239335275, 0.9887737332409082]
score_smt_rec=[0.7987048188358021, 0.8140008497794968, 0.8246377448610317, 0.8352453372012952, 0.8444317465898935, 0.8484608735147173, 0.8568561088889866]
score_smt_f1=[0.8877128131640869, 0.8966969826577467, 0.902782901595958, 0.9084361156260956, 0.9131092610049193, 0.914683746238835, 0.9181004709576138]

plt.title('randomoversampling + robust scaler')
plt.plot(k, score_ros_pre, label='ros precision')
plt.plot(k, score_ros_rec, label='ros recall')
plt.plot(k, score_ros_f1, label='ros f1_score')
plt.legend()
plt.xlabel('k 값')
plt.show()

plt.title('ADASYN + robust scaler')
plt.plot(k, score_ada_pre, label='ada precision')
plt.plot(k, score_ada_rec, label='ada recall')
plt.plot(k, score_ada_f1, label='ada f1_score')
plt.legend()
plt.xlabel('k 값')
plt.show()

plt.title('SMOTE + robust scaler')
plt.plot(k, score_smt_pre, label='smt precision')
plt.plot(k, score_smt_rec, label='smt recall')
plt.plot(k, score_smt_f1, label='smt f1_score')
plt.legend()
plt.xlabel('k 값')
plt.show()


#standard scaler
k=[1,3,5,10,15,20,30,40,100,565,600]
score_ros_pre=[0.9997128322940597, 0.99949429565498830, 0.9993416852856687, 0.9989127058092575, 0.9983543298150039, 0.9977881125226861, 0.9967801810674647, 0.9953990911319367, 0.9875197057277982, 0.9481751125586741, 0.9460436176230281]
score_ros_rec=[0.7140785020438662, 0.7239388744817078, 0.7339604119965423, 0.7537837164666754, 0.7732846907828227, 0.7732846907828227, 0.7710723338168286, 0.77343120448918, 0.770940471481107, 0.8701155993143158, 0.8821590259768801]
score_ros_f1=[0.8330926028802189, 0.839687651352293, 0.8463351382400893, 0.8592065599505665, 0.8715230475813044, 0.8713072332417107, 0.8695178065443491, 0.8704879376020315, 0.86589269111464, 0.9074698021957871, 0.9129851323381124]
score_ada_pre=[0.99953341468667, 0.9989964081977604, 0.9984279750572043, 0.9973874528530399, 0.9962420142803458, 0.9950241152095646, 0.9931277237680187, 0.990935051135609, 0.9830313442027812, 0.9732642355663322, 0.9741805297360853]
score_ada_rec=[0.8162553490825957, 0.8315112257459406, 0.8376956445278152, 0.8448179846415382, 0.8547101236883756, 0.8586523242863005, 0.8683099830001758, 0.8746995720733923, 0.8889002872384079, 0.8999941379916759, 0.898528635910663]
score_ada_f1=[0.8986447241045499, 0.9075916565359268, 0.9110266402097429, 0.9147848993128838, 0.9200649955039518, 0.9218219005663939, 0.9265340589228747, 0.9291963757511599, 0.93359910110976, 0.9351962538546464, 0.9348265268004848]
score_smt_pre=[0.9994309998399687, 0.999003618438303, 0.9985437903058041, 0.9973024054982818, 0.996469669710445, 0.9954094250770742, 0.9931111930542054, 0.9912401493156366, 0.9835276517553702, 0.9758427145453966, 0.9770651706166424]
score_smt_rec=[0.8235095893220811, 0.8373258318315678, 0.8439189486176432, 0.8504095058092684, 0.8601819700232957, 0.860958492666989, 0.8681083615372218, 0.8753754413725404, 0.8861735015310682, 0.8966492315356102, 0.8981876254523611]
score_smt_f1=[0.9029817177007358, 0.9110473457675754, 0.9147430858286287, 0.9180169707322088, 0.9233237137397676, 0.9233150282432613, 0.9264120705155767, 0.9297118137682062, 0.932315992292871, 0.9345713042216742, 0.9359675104583346]

plt.title('randomoversampling + standard scaler')
plt.plot(k, score_ros_pre, label='ros precision')
plt.plot(k, score_ros_rec, label='ros recall')
plt.plot(k, score_ros_f1, label='ros f1_score')
plt.legend()
plt.xlabel('k 값')
plt.show()

plt.title('ADASYN + standard scaler')
plt.plot(k, score_ada_pre, label='ada precision')
plt.plot(k, score_ada_rec, label='ada recall')
plt.plot(k, score_ada_f1, label='ada f1_score')
plt.legend()
plt.xlabel('k 값')
plt.show()

plt.title('SMOTE + standard scaler')
plt.plot(k, score_smt_pre, label='smt precision')
plt.plot(k, score_smt_rec, label='smt recall')
plt.plot(k, score_smt_f1, label='smt f1_score')
plt.legend()
plt.xlabel('k 값')
plt.show()

#normalizer
k=[1,3,5,10,15,20,30,100,300,565,600]
score_ros_pre=[0.9996474053179575, 0.9993319161858488, 0.9990083179858736, 0.9983284826555494, 0.9973870333988212, 0.9968186226964113, 0.9952018657287047, 0.9841429556338159, 0.9568300593187585, 0.9258596279962897, 0.9228118538938663]
score_ros_rec=[0.7061521105299401, 0.7232209573205574, 0.7232209573205574, 0.7438061330637481, 0.7438061330637481, 0.7528753314872606, 0.7627650066663736, 0.7738267914963445, 0.834249043998066, 0.8335897323194584, 0.8435819670930216]
score_ros_f1=[0.8276507508564658, 0.8391472868217055, 0.839033179222192, 0.8524747071911338, 0.8521312933791008, 0.8578416233316362, 0.8636171359847384, 0.8664041994750655, 0.8913448443199073, 0.8773052488743601, 0.8814200205134485]
score_ada_pre=[0.9925565555825833, 0.9889973012248288, 0.9868866529969959, 0.9864570164348926, 0.9851872818190396, 0.9851913503666829, 0.9842337410454531, 0.9811414469089047, 0.9744334598385107, 0.9729886955017845, 0.9728645587541294]
score_ada_rec=[0.8969752037047892, 0.9076147488129434, 0.9099009320593235, 0.9148103640307169, 0.9181663637962366, 0.9193973855442875, 0.9221818394982121, 0.9263731754499092, 0.9143560583856029, 0.9069259628348673, 0.906339762002462]
score_ada_f1=[0.9423484037844205, 0.946559985327495, 0.9468314664999352, 0.9492837373399435, 0.9504968520063719, 0.9511579426145624, 0.95219792691231, 0.9529710620142768, 0.9434393074509508, 0.9387965624739265, 0.9384246544163392]
score_smt_pre=[0.9929720013602578, 0.9896064500678534, 0.9873838086915071, 0.9870734556015026, 0.9863489270790788, 0.986294495844441, 0.9855680430767304, 0.9825334995325646, 0.9772838184594557, 0.9771814647205048, 0.9770940007337576]
score_smt_rec=[0.8984073960118969, 0.9081505574846527, 0.9104508226744612, 0.9162820681874789, 0.9199449108464097, 0.9215126075044321, 0.9225089007076612, 0.9239007809180548, 0.9095570890656821, 0.8984806528650755, 0.8974697082912106]
score_smt_f1=[0.9433256926603387, 0.9471303710042174, 0.9473579900600665, 0.9503612919892716, 0.9519903571347348, 0.9528036781469896, 0.9529964658427867, 0.9523155104845469, 0.9422049538610976, 0.9361799571021838, 0.9355907869012708]

plt.title('randomoversampling + normalizer')
plt.plot(k, score_ros_pre, label='ros precision')
plt.plot(k, score_ros_rec, label='ros recall')
plt.plot(k, score_ros_f1, label='ros f1_score')
plt.legend()
plt.xlabel('k 값')
plt.show()

plt.title('ADASYN + normalizer')
plt.plot(k, score_ada_pre, label='ada precision')
plt.plot(k, score_ada_rec, label='ada recall')
plt.plot(k, score_ada_f1, label='ada f1_score')
plt.legend()
plt.xlabel('k 값')
plt.show()

plt.title('SMOTE + normalizer')
plt.plot(k, score_smt_pre, label='smt precision')
plt.plot(k, score_smt_rec, label='smt recall')
plt.plot(k, score_smt_f1, label='smt f1_score')
plt.legend()
plt.xlabel('k 값')
plt.show()

